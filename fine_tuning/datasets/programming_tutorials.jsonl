{"instruction": "Teach me how to build a simple web server in Python", "input": "", "output": "# Building a Simple Web Server in Python\n\nPython makes it incredibly easy to create web servers. Here's a comprehensive guide from basic to more advanced implementations.\n\n## Method 1: Built-in HTTP Server (Python 3)\n\nFor quick prototyping and serving static files:\n\n```python\n# Simple static file server\nimport http.server\nimport socketserver\n\nPORT = 8000\n\nwith socketserver.TCPServer((\"\", PORT), http.server.SimpleHTTPRequestHandler) as httpd:\n    print(f\"Server running at http://localhost:{PORT}/\")\n    httpd.serve_forever()\n```\n\n## Method 2: Custom HTTP Server\n\n```python\nimport http.server\nimport socketserver\nfrom urllib.parse import urlparse, parse_qs\nimport json\n\nclass CustomHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        parsed_path = urlparse(self.path)\n        \n        if parsed_path.path == '/':\n            self.send_homepage()\n        elif parsed_path.path == '/api/hello':\n            self.send_api_response()\n        else:\n            self.send_404()\n    \n    def do_POST(self):\n        if self.path == '/api/data':\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            data = json.loads(post_data.decode('utf-8'))\n            \n            response = {'message': f'Received: {data}'}\n            self.send_json_response(response)\n        else:\n            self.send_404()\n    \n    def send_homepage(self):\n        html = \"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head><title>My Web Server</title></head>\n        <body>\n            <h1>Welcome to My Server!</h1>\n            <p>This is a custom Python web server.</p>\n            <button onclick=\"fetchData()\">Test API</button>\n            <div id=\"result\"></div>\n            \n            <script>\n            function fetchData() {\n                fetch('/api/hello')\n                    .then(response => response.json())\n                    .then(data => {\n                        document.getElementById('result').innerHTML = \n                            '<pre>' + JSON.stringify(data, null, 2) + '</pre>';\n                    });\n            }\n            </script>\n        </body>\n        </html>\n        \"\"\"\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(html.encode())\n    \n    def send_api_response(self):\n        response = {\n            'message': 'Hello from Python server!',\n            'timestamp': '2024-01-01T12:00:00Z',\n            'data': [1, 2, 3, 4, 5]\n        }\n        self.send_json_response(response)\n    \n    def send_json_response(self, data):\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.end_headers()\n        self.wfile.write(json.dumps(data).encode())\n    \n    def send_404(self):\n        self.send_response(404)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        self.wfile.write(b'<h1>404 - Page Not Found</h1>')\n\n# Run the server\nPORT = 8000\nwith socketserver.TCPServer((\"\", PORT), CustomHandler) as httpd:\n    print(f\"Custom server running at http://localhost:{PORT}/\")\n    httpd.serve_forever()\n```\n\n## Method 3: Flask Web Server (Recommended)\n\nFirst install Flask: `pip install flask`\n\n```python\nfrom flask import Flask, jsonify, request, render_template_string\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# In-memory data store\nusers = [\n    {'id': 1, 'name': 'Alice', 'email': 'alice@example.com'},\n    {'id': 2, 'name': 'Bob', 'email': 'bob@example.com'}\n]\n\n@app.route('/')\ndef home():\n    html_template = \"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head><title>Flask Server</title></head>\n    <body>\n        <h1>Flask Web Server</h1>\n        <h2>Users:</h2>\n        <ul>\n        {% for user in users %}\n            <li>{{ user.name }} ({{ user.email }})</li>\n        {% endfor %}\n        </ul>\n        \n        <h2>Add New User:</h2>\n        <form id=\"userForm\">\n            <input type=\"text\" id=\"name\" placeholder=\"Name\" required>\n            <input type=\"email\" id=\"email\" placeholder=\"Email\" required>\n            <button type=\"submit\">Add User</button>\n        </form>\n        \n        <script>\n        document.getElementById('userForm').onsubmit = function(e) {\n            e.preventDefault();\n            const name = document.getElementById('name').value;\n            const email = document.getElementById('email').value;\n            \n            fetch('/api/users', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({name: name, email: email})\n            })\n            .then(response => response.json())\n            .then(data => {\n                alert('User added!');\n                location.reload();\n            });\n        };\n        </script>\n    </body>\n    </html>\n    \"\"\"\n    return render_template_string(html_template, users=users)\n\n@app.route('/api/users', methods=['GET'])\ndef get_users():\n    return jsonify({'users': users, 'count': len(users)})\n\n@app.route('/api/users/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n    user = next((u for u in users if u['id'] == user_id), None)\n    if user:\n        return jsonify({'user': user})\n    return jsonify({'error': 'User not found'}), 404\n\n@app.route('/api/users', methods=['POST'])\ndef create_user():\n    data = request.get_json()\n    \n    if not data or 'name' not in data or 'email' not in data:\n        return jsonify({'error': 'Name and email required'}), 400\n    \n    new_user = {\n        'id': max([u['id'] for u in users]) + 1 if users else 1,\n        'name': data['name'],\n        'email': data['email']\n    }\n    \n    users.append(new_user)\n    return jsonify({'user': new_user, 'message': 'User created'}), 201\n\n@app.route('/api/health')\ndef health_check():\n    return jsonify({\n        'status': 'healthy',\n        'timestamp': datetime.now().isoformat(),\n        'version': '1.0.0'\n    })\n\nif __name__ == '__main__':\n    print(\"Flask server starting...\")\n    print(\"Visit: http://localhost:5000\")\n    app.run(debug=True, host='0.0.0.0', port=5000)\n```\n\n## Key Concepts Explained\n\n### HTTP Methods\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n### Response Codes\n- **200**: Success\n- **201**: Created\n- **400**: Bad Request\n- **404**: Not Found\n- **500**: Server Error\n\n### Best Practices\n1. **Use proper HTTP status codes**\n2. **Handle errors gracefully**\n3. **Validate input data**\n4. **Use JSON for API responses**\n5. **Add CORS headers for web apps**\n\n## Next Steps\n- Add database integration (SQLite, PostgreSQL)\n- Implement authentication (JWT tokens)\n- Add input validation and sanitization\n- Use environment variables for configuration\n- Deploy to cloud platforms (Heroku, AWS)\n\nThis tutorial gives you a solid foundation for building web servers in Python!"}
{"instruction": "Create a comprehensive guide for Git version control", "input": "", "output": "# Complete Git Version Control Guide\n\nGit is the most popular distributed version control system. This guide covers everything from basics to advanced workflows.\n\n## Installation and Setup\n\n### Install Git\n```bash\n# macOS\nbrew install git\n\n# Ubuntu/Debian\nsudo apt update\nsudo apt install git\n\n# Windows\n# Download from git-scm.com\n```\n\n### Initial Configuration\n```bash\n# Set global username and email\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Set default branch name\ngit config --global init.defaultBranch main\n\n# Set default editor\ngit config --global core.editor \"code --wait\"  # VS Code\ngit config --global core.editor \"vim\"          # Vim\n\n# View configuration\ngit config --list\n```\n\n## Basic Git Workflow\n\n### Initialize Repository\n```bash\n# Create new repository\nmkdir my-project\ncd my-project\ngit init\n\n# Clone existing repository\ngit clone https://github.com/username/repository.git\ncd repository\n```\n\n### Basic Commands\n```bash\n# Check repository status\ngit status\n\n# Add files to staging area\ngit add filename.txt        # Add specific file\ngit add .                   # Add all files\ngit add *.py                # Add all Python files\ngit add src/                # Add entire directory\n\n# Commit changes\ngit commit -m \"Add new feature\"\ngit commit -am \"Update and commit\"  # Add and commit in one step\n\n# View commit history\ngit log\ngit log --oneline           # Compact view\ngit log --graph             # Visual branch representation\ngit log --since=\"2 weeks ago\"\n```\n\n## Working with Branches\n\n### Branch Operations\n```bash\n# List branches\ngit branch                  # Local branches\ngit branch -r               # Remote branches\ngit branch -a               # All branches\n\n# Create new branch\ngit branch feature-login\ngit checkout -b feature-login  # Create and switch\ngit switch -c feature-login    # Modern syntax\n\n# Switch branches\ngit checkout main\ngit switch main             # Modern syntax\n\n# Delete branch\ngit branch -d feature-login    # Safe delete\ngit branch -D feature-login    # Force delete\n```\n\n### Merging Branches\n```bash\n# Switch to target branch\ngit switch main\n\n# Merge feature branch\ngit merge feature-login\n\n# Merge with no fast-forward (creates merge commit)\ngit merge --no-ff feature-login\n\n# Abort merge if conflicts\ngit merge --abort\n```\n\n## Remote Repositories\n\n### Working with Remotes\n```bash\n# Add remote repository\ngit remote add origin https://github.com/username/repo.git\n\n# View remotes\ngit remote -v\n\n# Push to remote\ngit push origin main\ngit push -u origin main     # Set upstream tracking\n\n# Pull from remote\ngit pull origin main\ngit pull                    # If upstream is set\n\n# Fetch without merging\ngit fetch origin\n```\n\n### Tracking Branches\n```bash\n# Create tracking branch\ngit checkout -b feature origin/feature\ngit switch -c feature origin/feature\n\n# Set upstream for existing branch\ngit branch --set-upstream-to=origin/main main\n\n# Push new branch to remote\ngit push -u origin feature-branch\n```\n\n## Advanced Git Operations\n\n### Stashing Changes\n```bash\n# Stash current changes\ngit stash\ngit stash save \"Work in progress on feature\"\n\n# List stashes\ngit stash list\n\n# Apply stash\ngit stash apply             # Keep stash\ngit stash pop               # Apply and remove stash\ngit stash apply stash@{2}   # Apply specific stash\n\n# Drop stash\ngit stash drop stash@{1}\ngit stash clear             # Remove all stashes\n```\n\n### Rebasing\n```bash\n# Rebase current branch onto main\ngit rebase main\n\n# Interactive rebase (last 3 commits)\ngit rebase -i HEAD~3\n\n# Continue rebase after resolving conflicts\ngit add .\ngit rebase --continue\n\n# Abort rebase\ngit rebase --abort\n```\n\n### Cherry-picking\n```bash\n# Apply specific commit to current branch\ngit cherry-pick abc123\n\n# Cherry-pick range of commits\ngit cherry-pick abc123..def456\n\n# Cherry-pick without committing\ngit cherry-pick --no-commit abc123\n```\n\n## Handling Conflicts\n\n### Merge Conflicts\n```bash\n# When conflicts occur during merge/rebase\n# 1. Edit conflicted files manually, or use a merge tool\ngit mergetool\n\n# 2. Mark conflicts as resolved\ngit add conflicted-file.txt\n\n# 3. Complete the merge\ngit commit  # For merge\ngit rebase --continue  # For rebase\n```\n\n### Conflict Resolution Example\n```\n# Conflicted file content:\n<<<<<<< HEAD\nconsole.log(\"Hello from main branch\");\n=======\nconsole.log(\"Hello from feature branch\");\n>>>>>>> feature-branch\n\n# After resolution:\nconsole.log(\"Hello from both branches\");\n```\n\n## Undoing Changes\n\n### Undoing Commits\n```bash\n# Undo last commit (keep changes)\ngit reset --soft HEAD~1\n\n# Undo last commit (discard changes)\ngit reset --hard HEAD~1\n\n# Undo specific commit (creates new commit)\ngit revert abc123\n\n# Reset to specific commit\ngit reset --hard abc123\n```\n\n### Undoing File Changes\n```bash\n# Discard changes in working directory\ngit checkout -- filename.txt\ngit restore filename.txt    # Modern syntax\n\n# Unstage file\ngit reset HEAD filename.txt\ngit restore --staged filename.txt  # Modern syntax\n\n# Remove untracked files\ngit clean -f                # Remove files\ngit clean -fd               # Remove files and directories\ngit clean -n                # Dry run (show what would be deleted)\n```\n\n## Git Workflows\n\n### Feature Branch Workflow\n```bash\n# 1. Create feature branch\ngit switch -c feature/user-auth\n\n# 2. Work on feature\n# ... make changes ...\ngit add .\ngit commit -m \"Add user authentication\"\n\n# 3. Push feature branch\ngit push -u origin feature/user-auth\n\n# 4. Create pull request (on GitHub/GitLab)\n# 5. After review, merge to main\ngit switch main\ngit pull origin main\ngit branch -d feature/user-auth\n```\n\n### Gitflow Workflow\n```bash\n# Initialize gitflow\ngit flow init\n\n# Start new feature\ngit flow feature start user-auth\n\n# Finish feature\ngit flow feature finish user-auth\n\n# Start release\ngit flow release start 1.0.0\n\n# Finish release\ngit flow release finish 1.0.0\n\n# Start hotfix\ngit flow hotfix start critical-bug\n\n# Finish hotfix\ngit flow hotfix finish critical-bug\n```\n\n## Git Configuration and Aliases\n\n### Useful Aliases\n```bash\n# Add to ~/.gitconfig or use git config --global\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.unstage 'reset HEAD --'\ngit config --global alias.last 'log -1 HEAD'\ngit config --global alias.visual '!gitk'\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n### .gitignore File\n```bash\n# Create .gitignore file\ntouch .gitignore\n\n# Common patterns\n# Dependencies\nnode_modules/\n__pycache__/\n*.pyc\n\n# Build outputs\ndist/\nbuild/\n*.o\n*.exe\n\n# IDE files\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS files\n.DS_Store\nThumbs.db\n\n# Environment files\n.env\n.env.local\n\n# Logs\n*.log\nlogs/\n```\n\n## Git Hooks\n\n### Pre-commit Hook Example\n```bash\n# Create .git/hooks/pre-commit\n#!/bin/sh\n\n# Run tests before commit\nnpm test\nif [ $? -ne 0 ]; then\n    echo \"Tests failed. Commit aborted.\"\n    exit 1\nfi\n\n# Check code formatting\nnpm run lint\nif [ $? -ne 0 ]; then\n    echo \"Linting failed. Commit aborted.\"\n    exit 1\nfi\n\necho \"All checks passed. Committing...\"\n```\n\n## Best Practices\n\n### Commit Messages\n```bash\n# Good commit message format:\n# <type>: <subject>\n# \n# <body>\n# \n# <footer>\n\n# Examples:\nfeat: add user authentication system\n\nfix: resolve null pointer exception in user service\n\ndocs: update API documentation for v2.0\n\nrefactor: simplify user validation logic\n\ntest: add unit tests for payment processing\n```\n\n### Branching Strategy\n- **main/master**: Production-ready code\n- **develop**: Integration branch for features\n- **feature/**: Feature development\n- **release/**: Release preparation\n- **hotfix/**: Critical bug fixes\n\n### General Tips\n1. **Commit early and often**\n2. **Write meaningful commit messages**\n3. **Use branches for features**\n4. **Keep commits focused and atomic**\n5. **Review code before merging**\n6. **Use .gitignore to exclude unnecessary files**\n7. **Tag important releases**\n8. **Backup repositories regularly**\n\nThis comprehensive guide covers most Git scenarios you'll encounter in real projects!"}
{"instruction": "Explain object-oriented programming concepts with Python examples", "input": "", "output": "# Object-Oriented Programming in Python\n\nObject-Oriented Programming (OOP) is a programming paradigm that organizes code into objects and classes. Python supports OOP principles including encapsulation, inheritance, polymorphism, and abstraction.\n\n## Classes and Objects\n\n### Basic Class Definition\n```python\nclass Dog:\n    # Class attribute (shared by all instances)\n    species = \"Canis familiaris\"\n    \n    # Constructor method (initializer)\n    def __init__(self, name, age, breed):\n        # Instance attributes (unique to each instance)\n        self.name = name\n        self.age = age\n        self.breed = breed\n    \n    # Instance method\n    def bark(self):\n        return f\"{self.name} says Woof!\"\n    \n    def get_info(self):\n        return f\"{self.name} is a {self.age}-year-old {self.breed}\"\n    \n    # String representation\n    def __str__(self):\n        return f\"Dog(name='{self.name}', age={self.age}, breed='{self.breed}')\"\n    \n    def __repr__(self):\n        return f\"Dog('{self.name}', {self.age}, '{self.breed}')\"\n\n# Creating objects (instances)\ndog1 = Dog(\"Buddy\", 3, \"Golden Retriever\")\ndog2 = Dog(\"Max\", 5, \"German Shepherd\")\n\n# Using objects\nprint(dog1.bark())        # Buddy says Woof!\nprint(dog2.get_info())    # Max is a 5-year-old German Shepherd\nprint(dog1.species)       # Canis familiaris\nprint(dog1)               # Dog(name='Buddy', age=3, breed='Golden Retriever')\n```\n\n## Encapsulation\n\nEncapsulation restricts access to methods and variables to prevent accidental modification.\n\n### Access Modifiers\n```python\nclass BankAccount:\n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number  # Public\n        self._balance = initial_balance       # Protected (convention)\n        self.__pin = None                     # Private (name mangling)\n    \n    # Public method\n    def deposit(self, amount):\n        if amount > 0:\n            self._balance += amount\n            return True\n        return False\n    \n    # Public method\n    def withdraw(self, amount):\n        if 0 < amount <= self._balance:\n            self._balance -= amount\n            return True\n        return False\n    \n    # Protected method (convention)\n    def _validate_transaction(self, amount):\n        return amount > 0\n    \n    # Private method (name mangling)\n    def __encrypt_pin(self, pin):\n        return f\"encrypted_{pin}\"\n    \n    # Property (getter)\n    @property\n    def balance(self):\n        return self._balance\n    \n    # Property setter\n    @balance.setter\n    def balance(self, value):\n        if value >= 0:\n            self._balance = value\n        else:\n            raise ValueError(\"Balance cannot be negative\")\n    \n    # Property deleter\n    @balance.deleter\n    def balance(self):\n        print(\"Resetting balance to 0\")\n        self._balance = 0\n\n# Usage\naccount = BankAccount(\"12345\", 1000)\nprint(account.balance)        # 1000 (using property)\naccount.deposit(500)\nprint(account.balance)        # 1500\n\n# Direct access (not recommended)\nprint(account._balance)       # 1500 (protected, but accessible)\n# print(account.__pin)        # AttributeError (private)\nprint(account._BankAccount__pin)  # None (name mangling workaround)\n```\n\n## Inheritance\n\nInheritance allows a class to inherit attributes and methods from another class.\n\n### Single Inheritance\n```python\nclass Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def speak(self):\n        pass  # Abstract method\n    \n    def sleep(self):\n        return f\"{self.name} is sleeping\"\n\nclass Dog(Animal):  # Dog inherits from Animal\n    def __init__(self, name, age, breed):\n        super().__init__(name, age)  # Call parent constructor\n        self.breed = breed\n    \n    def speak(self):  # Override parent method\n        return f\"{self.name} barks: Woof!\"\n    \n    def fetch(self):  # New method specific to Dog\n        return f\"{self.name} fetches the ball\"\n\nclass Cat(Animal):\n    def __init__(self, name, age, color):\n        super().__init__(name, age)\n        self.color = color\n    \n    def speak(self):\n        return f\"{self.name} meows: Meow!\"\n    \n    def climb(self):\n        return f\"{self.name} climbs the tree\"\n\n# Usage\ndog = Dog(\"Buddy\", 3, \"Labrador\")\ncat = Cat(\"Whiskers\", 2, \"Orange\")\n\nprint(dog.speak())   # Buddy barks: Woof!\nprint(cat.speak())   # Whiskers meows: Meow!\nprint(dog.sleep())   # Buddy is sleeping (inherited)\nprint(dog.fetch())   # Buddy fetches the ball\n\n# Check inheritance\nprint(isinstance(dog, Dog))     # True\nprint(isinstance(dog, Animal))  # True\nprint(issubclass(Dog, Animal))  # True\n```\n\n### Multiple Inheritance\n```python\nclass Flyable:\n    def fly(self):\n        return \"Flying high!\"\n\nclass Swimmable:\n    def swim(self):\n        return \"Swimming gracefully!\"\n\nclass Duck(Animal, Flyable, Swimmable):\n    def __init__(self, name, age):\n        super().__init__(name, age)\n    \n    def speak(self):\n        return f\"{self.name} quacks: Quack!\"\n\n# Usage\nduck = Duck(\"Donald\", 4)\nprint(duck.speak())  # Donald quacks: Quack!\nprint(duck.fly())    # Flying high!\nprint(duck.swim())   # Swimming gracefully!\nprint(duck.sleep())  # Donald is sleeping\n\n# Method Resolution Order (MRO)\nprint(Duck.__mro__)\n# (<class '__main__.Duck'>, <class '__main__.Animal'>, \n#  <class '__main__.Flyable'>, <class '__main__.Swimmable'>, <class 'object'>)\n```\n\n## Polymorphism\n\nPolymorphism allows objects of different types to be treated as instances of the same type.\n\n### Method Overriding and Duck Typing\n```python\nclass Shape:\n    def area(self):\n        raise NotImplementedError(\"Subclass must implement area method\")\n    \n    def perimeter(self):\n        raise NotImplementedError(\"Subclass must implement perimeter method\")\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height\n    \n    def perimeter(self):\n        return 2 * (self.width + self.height)\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return 3.14159 * self.radius ** 2\n    \n    def perimeter(self):\n        return 2 * 3.14159 * self.radius\n\nclass Triangle(Shape):\n    def __init__(self, base, height, side1, side2, side3):\n        self.base = base\n        self.height = height\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    \n    def area(self):\n        return 0.5 * self.base * self.height\n    \n    def perimeter(self):\n        return self.side1 + self.side2 + self.side3\n\n# Polymorphic behavior\ndef print_shape_info(shape):\n    print(f\"Area: {shape.area():.2f}\")\n    print(f\"Perimeter: {shape.perimeter():.2f}\")\n    print(\"-\" * 20)\n\nshapes = [\n    Rectangle(5, 3),\n    Circle(4),\n    Triangle(6, 4, 5, 5, 6)\n]\n\n# Same interface, different implementations\nfor shape in shapes:\n    print_shape_info(shape)\n```\n\n### Operator Overloading\n```python\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scalar):\n        return Vector(self.x * scalar, self.y * scalar)\n    \n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n    \n    def __str__(self):\n        return f\"Vector({self.x}, {self.y})\"\n    \n    def __len__(self):\n        return int((self.x ** 2 + self.y ** 2) ** 0.5)\n\n# Usage\nv1 = Vector(2, 3)\nv2 = Vector(1, 4)\n\nprint(v1 + v2)   # Vector(3, 7)\nprint(v1 - v2)   # Vector(1, -1)\nprint(v1 * 3)    # Vector(6, 9)\nprint(v1 == v2)  # False\nprint(len(v1))   # 3\n```\n\n## Abstraction\n\nAbstraction hides complex implementation details while showing only essential features.\n\n### Abstract Base Classes\n```python\nfrom abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n    \n    @abstractmethod\n    def start_engine(self):\n        pass\n    \n    @abstractmethod\n    def stop_engine(self):\n        pass\n    \n    def get_info(self):\n        return f\"{self.brand} {self.model}\"\n\nclass Car(Vehicle):\n    def __init__(self, brand, model, doors):\n        super().__init__(brand, model)\n        self.doors = doors\n    \n    def start_engine(self):\n        return \"Car engine started with key\"\n    \n    def stop_engine(self):\n        return \"Car engine stopped\"\n\nclass Motorcycle(Vehicle):\n    def __init__(self, brand, model, engine_size):\n        super().__init__(brand, model)\n        self.engine_size = engine_size\n    \n    def start_engine(self):\n        return \"Motorcycle engine started with button\"\n    \n    def stop_engine(self):\n        return \"Motorcycle engine stopped\"\n\n# Usage\ncar = Car(\"Toyota\", \"Camry\", 4)\nmotorcycle = Motorcycle(\"Honda\", \"CBR\", 600)\n\nprint(car.start_engine())        # Car engine started with key\nprint(motorcycle.start_engine()) # Motorcycle engine started with button\n\n# Cannot instantiate abstract class\n# vehicle = Vehicle(\"Generic\", \"Model\")  # TypeError\n```\n\n## Advanced OOP Concepts\n\n### Class Methods and Static Methods\n```python\nclass Person:\n    population = 0  # Class variable\n    \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        Person.population += 1\n    \n    @classmethod\n    def get_population(cls):\n        return cls.population\n    \n    @classmethod\n    def from_string(cls, person_str):\n        name, age = person_str.split('-')\n        return cls(name, int(age))\n    \n    @staticmethod\n    def is_adult(age):\n        return age >= 18\n    \n    def __str__(self):\n        return f\"Person(name='{self.name}', age={self.age})\"\n\n# Usage\nperson1 = Person(\"Alice\", 25)\nperson2 = Person.from_string(\"Bob-30\")  # Alternative constructor\n\nprint(Person.get_population())  # 2\nprint(Person.is_adult(16))      # False\nprint(Person.is_adult(20))      # True\n```\n\n### Properties and Descriptors\n```python\nclass Temperature:\n    def __init__(self, celsius=0):\n        self._celsius = celsius\n    \n    @property\n    def celsius(self):\n        return self._celsius\n    \n    @celsius.setter\n    def celsius(self, value):\n        if value < -273.15:\n            raise ValueError(\"Temperature cannot be below absolute zero\")\n        self._celsius = value\n    \n    @property\n    def fahrenheit(self):\n        return (self._celsius * 9/5) + 32\n    \n    @fahrenheit.setter\n    def fahrenheit(self, value):\n        self.celsius = (value - 32) * 5/9\n    \n    @property\n    def kelvin(self):\n        return self._celsius + 273.15\n    \n    @kelvin.setter\n    def kelvin(self, value):\n        self.celsius = value - 273.15\n\n# Usage\ntemp = Temperature(25)\nprint(f\"Celsius: {temp.celsius}°C\")       # 25°C\nprint(f\"Fahrenheit: {temp.fahrenheit}°F\") # 77°F\nprint(f\"Kelvin: {temp.kelvin}K\")          # 298.15K\n\ntemp.fahrenheit = 100\nprint(f\"Celsius: {temp.celsius}°C\")       # 37.78°C\n```\n\n## Design Patterns Example\n\n### Singleton Pattern\n```python\nclass DatabaseConnection:\n    _instance = None\n    _initialized = False\n    \n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n    \n    def __init__(self):\n        if not self._initialized:\n            self.connection_string = \"database://localhost:5432\"\n            self.is_connected = False\n            self._initialized = True\n    \n    def connect(self):\n        if not self.is_connected:\n            print(\"Connecting to database...\")\n            self.is_connected = True\n        return \"Connected\"\n    \n    def disconnect(self):\n        if self.is_connected:\n            print(\"Disconnecting from database...\")\n            self.is_connected = False\n        return \"Disconnected\"\n\n# Usage\ndb1 = DatabaseConnection()\ndb2 = DatabaseConnection()\n\nprint(db1 is db2)  # True (same instance)\ndb1.connect()\nprint(db2.is_connected)  # True\n```\n\n### Factory Pattern\n```python\nclass AnimalFactory:\n    @staticmethod\n    def create_animal(animal_type, name, age):\n        if animal_type.lower() == \"dog\":\n            return Dog(name, age, \"Mixed\")\n        elif animal_type.lower() == \"cat\":\n            return Cat(name, age, \"Mixed\")\n        else:\n            raise ValueError(f\"Unknown animal type: {animal_type}\")\n\n# Usage\nanimals = [\n    AnimalFactory.create_animal(\"dog\", \"Buddy\", 3),\n    AnimalFactory.create_animal(\"cat\", \"Whiskers\", 2)\n]\n\nfor animal in animals:\n    print(animal.speak())\n```\n\n## Best Practices\n\n1. **Follow the Single Responsibility Principle**: Each class should have one reason to change\n2. **Use meaningful class and method names**\n3. **Prefer composition over inheritance** when possible\n4. **Keep methods small and focused**\n5. **Use properties for controlled attribute access**\n6. **Document your classes and methods**\n7. **Follow naming conventions** (PascalCase for classes, snake_case for methods)\n8. **Use abstract base classes** for defining interfaces\n\nThis comprehensive guide covers the core OOP concepts in Python with practical examples you can use in real projects!"}
{"instruction": "Build a React component tutorial from scratch", "input": "", "output": "# Complete React Components Tutorial\n\nThis tutorial covers everything you need to know about building React components from basic to advanced concepts.\n\n## Setting Up Your Environment\n\n### Create React App\n```bash\n# Create new React project\nnpx create-react-app my-react-app\ncd my-react-app\nnpm start\n\n# Or with Vite (faster alternative)\nnpm create vite@latest my-react-app -- --template react\ncd my-react-app\nnpm install\nnpm run dev\n```\n\n## 1. Basic Function Components\n\n### Simple Component\n```jsx\n// components/Welcome.jsx\nimport React from 'react';\n\n// Function component (modern approach)\nfunction Welcome() {\n  return (\n    <div>\n      <h1>Welcome to React!</h1>\n      <p>This is my first component.</p>\n    </div>\n  );\n}\n\n// Alternative: Arrow function syntax\nconst Welcome = () => {\n  return (\n    <div>\n      <h1>Welcome to React!</h1>\n      <p>This is my first component.</p>\n    </div>\n  );\n};\n\nexport default Welcome;\n```\n\n### Component with Props\n```jsx\n// components/UserCard.jsx\nimport React from 'react';\n\nconst UserCard = ({ name, email, avatar, isOnline = false }) => {\n  return (\n    <div className=\"user-card\">\n      <img src={avatar} alt={`${name}'s avatar`} className=\"avatar\" />\n      <div className=\"user-info\">\n        <h3>{name}</h3>\n        <p>{email}</p>\n        <span className={`status ${isOnline ? 'online' : 'offline'}`}>\n          {isOnline ? '🟢 Online' : '⚫ Offline'}\n        </span>\n      </div>\n    </div>\n  );\n};\n\n// PropTypes for type checking (optional but recommended)\nimport PropTypes from 'prop-types';\n\nUserCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  isOnline: PropTypes.bool\n};\n\nexport default UserCard;\n```\n\n## 2. State Management with Hooks\n\n### useState Hook\n```jsx\n// components/Counter.jsx\nimport React, { useState } from 'react';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  const [step, setStep] = useState(1);\n\n  const increment = () => setCount(count + step);\n  const decrement = () => setCount(count - step);\n  const reset = () => setCount(0);\n\n  return (\n    <div className=\"counter\">\n      <h2>Counter: {count}</h2>\n      \n      <div className=\"controls\">\n        <label>\n          Step:\n          <input\n            type=\"number\"\n            value={step}\n            onChange={(e) => setStep(parseInt(e.target.value) || 1)}\n            min=\"1\"\n          />\n        </label>\n      </div>\n      \n      <div className=\"buttons\">\n        <button onClick={decrement}>-{step}</button>\n        <button onClick={reset}>Reset</button>\n        <button onClick={increment}>+{step}</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Counter;\n```\n\n### Complex State Management\n```jsx\n// components/TodoList.jsx\nimport React, { useState } from 'react';\n\nconst TodoList = () => {\n  const [todos, setTodos] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [filter, setFilter] = useState('all'); // all, active, completed\n\n  const addTodo = () => {\n    if (inputValue.trim()) {\n      const newTodo = {\n        id: Date.now(),\n        text: inputValue.trim(),\n        completed: false,\n        createdAt: new Date()\n      };\n      setTodos([...todos, newTodo]);\n      setInputValue('');\n    }\n  };\n\n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const filteredTodos = todos.filter(todo => {\n    if (filter === 'active') return !todo.completed;\n    if (filter === 'completed') return todo.completed;\n    return true;\n  });\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      addTodo();\n    }\n  };\n\n  return (\n    <div className=\"todo-list\">\n      <h2>Todo List ({todos.length})</h2>\n      \n      {/* Add Todo */}\n      <div className=\"add-todo\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Add a new todo...\"\n        />\n        <button onClick={addTodo}>Add</button>\n      </div>\n\n      {/* Filter Buttons */}\n      <div className=\"filters\">\n        {['all', 'active', 'completed'].map(filterType => (\n          <button\n            key={filterType}\n            className={filter === filterType ? 'active' : ''}\n            onClick={() => setFilter(filterType)}\n          >\n            {filterType.charAt(0).toUpperCase() + filterType.slice(1)}\n          </button>\n        ))}\n      </div>\n\n      {/* Todo Items */}\n      <ul className=\"todos\">\n        {filteredTodos.map(todo => (\n          <li key={todo.id} className={todo.completed ? 'completed' : ''}>\n            <input\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={() => toggleTodo(todo.id)}\n            />\n            <span>{todo.text}</span>\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n\n      {/* Actions */}\n      {todos.some(todo => todo.completed) && (\n        <button onClick={clearCompleted}>Clear Completed</button>\n      )}\n    </div>\n  );\n};\n\nexport default TodoList;\n```\n\n## 3. useEffect Hook\n\n### Data Fetching Component\n```jsx\n// components/UserList.jsx\nimport React, { useState, useEffect } from 'react';\n\nconst UserList = () => {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users?_page=${page}&_limit=5`\n        );\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch users');\n        }\n        \n        const userData = await response.json();\n        \n        if (page === 1) {\n          setUsers(userData);\n        } else {\n          setUsers(prev => [...prev, ...userData]);\n        }\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, [page]); // Dependency array - effect runs when page changes\n\n  const loadMore = () => {\n    setPage(prev => prev + 1);\n  };\n\n  if (error) {\n    return (\n      <div className=\"error\">\n        <h2>Error: {error}</h2>\n        <button onClick={() => window.location.reload()}>Retry</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"user-list\">\n      <h2>Users</h2>\n      \n      <div className=\"users\">\n        {users.map(user => (\n          <div key={user.id} className=\"user-item\">\n            <h3>{user.name}</h3>\n            <p>Email: {user.email}</p>\n            <p>Phone: {user.phone}</p>\n            <p>Website: {user.website}</p>\n          </div>\n        ))}\n      </div>\n\n      {loading && <div className=\"loading\">Loading...</div>}\n      \n      {!loading && (\n        <button onClick={loadMore}>Load More</button>\n      )}\n    </div>\n  );\n};\n\nexport default UserList;\n```\n\n### Timer Component with Cleanup\n```jsx\n// components/Timer.jsx\nimport React, { useState, useEffect } from 'react';\n\nconst Timer = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n\n  useEffect(() => {\n    let interval = null;\n    \n    if (isActive && !isPaused) {\n      interval = setInterval(() => {\n        setSeconds(prevSeconds => prevSeconds + 1);\n      }, 1000);\n    }\n    \n    // Cleanup function\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isActive, isPaused]);\n\n  const start = () => {\n    setIsActive(true);\n    setIsPaused(false);\n  };\n\n  const pause = () => {\n    setIsPaused(true);\n  };\n\n  const resume = () => {\n    setIsPaused(false);\n  };\n\n  const reset = () => {\n    setIsActive(false);\n    setIsPaused(false);\n    setSeconds(0);\n  };\n\n  const formatTime = (totalSeconds) => {\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const secs = totalSeconds % 60;\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes\n      .toString()\n      .padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"timer\">\n      <h2>Timer</h2>\n      <div className=\"time-display\">{formatTime(seconds)}</div>\n      \n      <div className=\"timer-controls\">\n        {!isActive ? (\n          <button onClick={start}>Start</button>\n        ) : isPaused ? (\n          <button onClick={resume}>Resume</button>\n        ) : (\n          <button onClick={pause}>Pause</button>\n        )}\n        \n        <button onClick={reset}>Reset</button>\n      </div>\n      \n      <div className=\"status\">\n        Status: {isActive ? (isPaused ? 'Paused' : 'Running') : 'Stopped'}\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n```\n\n## 4. Custom Hooks\n\n### useLocalStorage Hook\n```jsx\n// hooks/useLocalStorage.js\nimport { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  // Get value from localStorage or use initial value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Update localStorage when state changes\n  const setValue = (value) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n```\n\n### useFetch Hook\n```jsx\n// hooks/useFetch.js\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url, options = {}) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    \n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const response = await fetch(url, {\n          ...options,\n          signal: abortController.signal\n        });\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const result = await response.json();\n        \n        if (!abortController.signal.aborted) {\n          setData(result);\n        }\n      } catch (err) {\n        if (!abortController.signal.aborted) {\n          setError(err.message);\n        }\n      } finally {\n        if (!abortController.signal.aborted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchData();\n\n    // Cleanup function\n    return () => {\n      abortController.abort();\n    };\n  }, [url]);\n\n  return { data, loading, error };\n};\n\nexport default useFetch;\n```\n\n### Using Custom Hooks\n```jsx\n// components/Settings.jsx\nimport React from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nconst Settings = () => {\n  const [theme, setTheme] = useLocalStorage('theme', 'light');\n  const [language, setLanguage] = useLocalStorage('language', 'en');\n  const [notifications, setNotifications] = useLocalStorage('notifications', true);\n\n  return (\n    <div className={`settings theme-${theme}`}>\n      <h2>Settings</h2>\n      \n      <div className=\"setting-group\">\n        <label>\n          Theme:\n          <select value={theme} onChange={(e) => setTheme(e.target.value)}>\n            <option value=\"light\">Light</option>\n            <option value=\"dark\">Dark</option>\n            <option value=\"auto\">Auto</option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"setting-group\">\n        <label>\n          Language:\n          <select value={language} onChange={(e) => setLanguage(e.target.value)}>\n            <option value=\"en\">English</option>\n            <option value=\"es\">Spanish</option>\n            <option value=\"fr\">French</option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"setting-group\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={notifications}\n            onChange={(e) => setNotifications(e.target.checked)}\n          />\n          Enable notifications\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n```\n\n## 5. Context API for State Management\n\n### Theme Context\n```jsx\n// contexts/ThemeContext.jsx\nimport React, { createContext, useContext, useReducer } from 'react';\n\nconst ThemeContext = createContext();\n\nconst themeReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_THEME':\n      return {\n        ...state,\n        theme: action.payload\n      };\n    case 'TOGGLE_THEME':\n      return {\n        ...state,\n        theme: state.theme === 'light' ? 'dark' : 'light'\n      };\n    case 'SET_PRIMARY_COLOR':\n      return {\n        ...state,\n        primaryColor: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  theme: 'light',\n  primaryColor: '#007bff'\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(themeReducer, initialState);\n\n  const setTheme = (theme) => {\n    dispatch({ type: 'SET_THEME', payload: theme });\n  };\n\n  const toggleTheme = () => {\n    dispatch({ type: 'TOGGLE_THEME' });\n  };\n\n  const setPrimaryColor = (color) => {\n    dispatch({ type: 'SET_PRIMARY_COLOR', payload: color });\n  };\n\n  const value = {\n    ...state,\n    setTheme,\n    toggleTheme,\n    setPrimaryColor\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n```\n\n### Using Context\n```jsx\n// components/Header.jsx\nimport React from 'react';\nimport { useTheme } from '../contexts/ThemeContext';\n\nconst Header = () => {\n  const { theme, toggleTheme, primaryColor } = useTheme();\n\n  return (\n    <header \n      className={`header theme-${theme}`}\n      style={{ borderBottom: `3px solid ${primaryColor}` }}\n    >\n      <h1>My React App</h1>\n      \n      <div className=\"header-controls\">\n        <button onClick={toggleTheme}>\n          {theme === 'light' ? '🌙 Dark' : '☀️ Light'}\n        </button>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n```\n\n## 6. Component Composition Patterns\n\n### Compound Components\n```jsx\n// components/Tabs.jsx\nimport React, { useState, createContext, useContext } from 'react';\n\nconst TabsContext = createContext();\n\nconst Tabs = ({ children, defaultTab = 0 }) => {\n  const [activeTab, setActiveTab] = useState(defaultTab);\n\n  return (\n    <TabsContext.Provider value={{ activeTab, setActiveTab }}>\n      <div className=\"tabs\">\n        {children}\n      </div>\n    </TabsContext.Provider>\n  );\n};\n\nconst TabList = ({ children }) => {\n  return (\n    <div className=\"tab-list\" role=\"tablist\">\n      {children}\n    </div>\n  );\n};\n\nconst Tab = ({ children, index }) => {\n  const { activeTab, setActiveTab } = useContext(TabsContext);\n  const isActive = activeTab === index;\n\n  return (\n    <button\n      className={`tab ${isActive ? 'active' : ''}`}\n      onClick={() => setActiveTab(index)}\n      role=\"tab\"\n      aria-selected={isActive}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst TabPanels = ({ children }) => {\n  return (\n    <div className=\"tab-panels\">\n      {children}\n    </div>\n  );\n};\n\nconst TabPanel = ({ children, index }) => {\n  const { activeTab } = useContext(TabsContext);\n  const isActive = activeTab === index;\n\n  return (\n    <div\n      className={`tab-panel ${isActive ? 'active' : ''}`}\n      role=\"tabpanel\"\n      hidden={!isActive}\n    >\n      {isActive && children}\n    </div>\n  );\n};\n\n// Export compound component\nTabs.TabList = TabList;\nTabs.Tab = Tab;\nTabs.TabPanels = TabPanels;\nTabs.TabPanel = TabPanel;\n\nexport default Tabs;\n```\n\n### Using Compound Components\n```jsx\n// components/Dashboard.jsx\nimport React from 'react';\nimport Tabs from './Tabs';\n\nconst Dashboard = () => {\n  return (\n    <div className=\"dashboard\">\n      <h1>Dashboard</h1>\n      \n      <Tabs defaultTab={0}>\n        <Tabs.TabList>\n          <Tabs.Tab index={0}>Overview</Tabs.Tab>\n          <Tabs.Tab index={1}>Analytics</Tabs.Tab>\n          <Tabs.Tab index={2}>Settings</Tabs.Tab>\n        </Tabs.TabList>\n        \n        <Tabs.TabPanels>\n          <Tabs.TabPanel index={0}>\n            <h2>Overview</h2>\n            <p>Welcome to your dashboard overview.</p>\n            <div className=\"stats\">\n              <div className=\"stat-card\">\n                <h3>Total Users</h3>\n                <p>1,234</p>\n              </div>\n              <div className=\"stat-card\">\n                <h3>Revenue</h3>\n                <p>$12,345</p>\n              </div>\n            </div>\n          </Tabs.TabPanel>\n          \n          <Tabs.TabPanel index={1}>\n            <h2>Analytics</h2>\n            <p>Here are your analytics data.</p>\n            <div className=\"chart-placeholder\">\n              📊 Chart would go here\n            </div>\n          </Tabs.TabPanel>\n          \n          <Tabs.TabPanel index={2}>\n            <h2>Settings</h2>\n            <p>Configure your dashboard settings.</p>\n            <form>\n              <label>\n                Dashboard Name:\n                <input type=\"text\" defaultValue=\"My Dashboard\" />\n              </label>\n              <button type=\"submit\">Save</button>\n            </form>\n          </Tabs.TabPanel>\n        </Tabs.TabPanels>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Dashboard;\n```\n\n## 7. Main App Component\n\n```jsx\n// App.jsx\nimport React from 'react';\nimport { ThemeProvider } from './contexts/ThemeContext';\nimport Header from './components/Header';\nimport Dashboard from './components/Dashboard';\nimport Counter from './components/Counter';\nimport TodoList from './components/TodoList';\nimport Timer from './components/Timer';\nimport UserList from './components/UserList';\nimport Settings from './components/Settings';\nimport './App.css';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <div className=\"App\">\n        <Header />\n        \n        <main className=\"main-content\">\n          <section>\n            <Dashboard />\n          </section>\n          \n          <section>\n            <div className=\"component-grid\">\n              <Counter />\n              <Timer />\n            </div>\n          </section>\n          \n          <section>\n            <TodoList />\n          </section>\n          \n          <section>\n            <UserList />\n          </section>\n          \n          <section>\n            <Settings />\n          </section>\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n```\n\n## Best Practices\n\n1. **Keep components small and focused**\n2. **Use meaningful component and prop names**\n3. **Extract reusable logic into custom hooks**\n4. **Use PropTypes or TypeScript for type checking**\n5. **Handle loading and error states**\n6. **Optimize with React.memo for expensive components**\n7. **Use useCallback and useMemo to prevent unnecessary re-renders**\n8. **Clean up effects to prevent memory leaks**\n9. **Follow consistent file organization**\n10. **Write tests for your components**\n\nThis comprehensive tutorial provides a solid foundation for building React applications with modern patterns and best practices!"}
{"instruction": "Explain SQL database concepts and write practical queries", "input": "", "output": "# Complete SQL Database Tutorial\n\nSQL (Structured Query Language) is the standard language for working with relational databases. This tutorial covers everything from basic concepts to advanced queries.\n\n## Database Fundamentals\n\n### What is a Database?\nA database is an organized collection of structured information stored electronically. A relational database organizes data into tables with relationships between them.\n\n### Key Concepts\n- **Table**: Collection of related data (like a spreadsheet)\n- **Row/Record**: Individual entry in a table\n- **Column/Field**: Attribute of the data\n- **Primary Key**: Unique identifier for each row\n- **Foreign Key**: Reference to primary key in another table\n- **Schema**: Structure/blueprint of the database\n\n## Setting Up Sample Database\n\n### Create Tables\n```sql\n-- Create Users table\nCREATE TABLE users (\n    user_id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    date_of_birth DATE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\n-- Create Products table\nCREATE TABLE products (\n    product_id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT DEFAULT 0,\n    category_id INT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create Categories table\nCREATE TABLE categories (\n    category_id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(50) UNIQUE NOT NULL,\n    description TEXT\n);\n\n-- Create Orders table\nCREATE TABLE orders (\n    order_id INT PRIMARY KEY AUTO_INCREMENT,\n    user_id INT NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',\n    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE\n);\n\n-- Create Order Items table (many-to-many relationship)\nCREATE TABLE order_items (\n    order_item_id INT PRIMARY KEY AUTO_INCREMENT,\n    order_id INT NOT NULL,\n    product_id INT NOT NULL,\n    quantity INT NOT NULL,\n    unit_price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n\n-- Add foreign key to products table\nALTER TABLE products \nADD FOREIGN KEY (category_id) REFERENCES categories(category_id);\n```\n\n### Insert Sample Data\n```sql\n-- Insert Categories\nINSERT INTO categories (name, description) VALUES\n('Electronics', 'Electronic devices and gadgets'),\n('Clothing', 'Apparel and fashion items'),\n('Books', 'Physical and digital books'),\n('Home & Garden', 'Home improvement and gardening supplies'),\n('Sports', 'Sports equipment and gear');\n\n-- Insert Users\nINSERT INTO users (username, email, first_name, last_name, date_of_birth) VALUES\n('john_doe', 'john@example.com', 'John', 'Doe', '1990-05-15'),\n('jane_smith', 'jane@example.com', 'Jane', 'Smith', '1985-08-22'),\n('mike_wilson', 'mike@example.com', 'Mike', 'Wilson', '1992-12-03'),\n('sarah_brown', 'sarah@example.com', 'Sarah', 'Brown', '1988-03-10'),\n('alex_johnson', 'alex@example.com', 'Alex', 'Johnson', '1995-07-18');\n\n-- Insert Products\nINSERT INTO products (name, description, price, stock_quantity, category_id) VALUES\n('Laptop Pro 15\"', 'High-performance laptop for professionals', 1299.99, 25, 1),\n('Wireless Headphones', 'Noise-cancelling wireless headphones', 199.99, 50, 1),\n('Smartphone X', 'Latest flagship smartphone', 899.99, 30, 1),\n('Casual T-Shirt', 'Comfortable cotton t-shirt', 19.99, 100, 2),\n('Jeans Classic', 'Classic fit denim jeans', 49.99, 75, 2),\n('Programming Guide', 'Complete guide to modern programming', 39.99, 40, 3),\n('Garden Tools Set', 'Essential tools for gardening', 79.99, 20, 4),\n('Basketball', 'Official size basketball', 29.99, 60, 5),\n('Running Shoes', 'Lightweight running shoes', 89.99, 45, 5);\n\n-- Insert Orders\nINSERT INTO orders (user_id, total_amount, status) VALUES\n(1, 1499.98, 'delivered'),\n(2, 249.98, 'shipped'),\n(3, 69.98, 'delivered'),\n(1, 179.97, 'processing'),\n(4, 899.99, 'pending');\n\n-- Insert Order Items\nINSERT INTO order_items (order_id, product_id, quantity, unit_price) VALUES\n-- Order 1 (John's order)\n(1, 1, 1, 1299.99),  -- Laptop\n(1, 2, 1, 199.99),   -- Headphones\n-- Order 2 (Jane's order)\n(2, 4, 2, 19.99),    -- 2 T-shirts\n(2, 8, 1, 29.99),    -- Basketball\n(2, 2, 1, 199.99),   -- Headphones\n-- Order 3 (Mike's order)\n(3, 5, 1, 49.99),    -- Jeans\n(3, 4, 1, 19.99),    -- T-shirt\n-- Order 4 (John's second order)\n(4, 9, 2, 89.99),    -- 2 Running shoes\n-- Order 5 (Sarah's order)\n(5, 3, 1, 899.99);   -- Smartphone\n```\n\n## Basic SQL Queries\n\n### SELECT Statements\n```sql\n-- Select all columns from users table\nSELECT * FROM users;\n\n-- Select specific columns\nSELECT username, email, first_name, last_name FROM users;\n\n-- Select with alias\nSELECT \n    username AS user_name,\n    CONCAT(first_name, ' ', last_name) AS full_name,\n    email\nFROM users;\n\n-- Select with WHERE clause\nSELECT * FROM products WHERE price > 100;\n\n-- Multiple conditions\nSELECT * FROM products \nWHERE price BETWEEN 50 AND 200 \nAND stock_quantity > 30;\n\n-- Pattern matching with LIKE\nSELECT * FROM products WHERE name LIKE '%phone%';\n\n-- IN operator\nSELECT * FROM orders WHERE status IN ('shipped', 'delivered');\n\n-- IS NULL / IS NOT NULL\nSELECT * FROM users WHERE date_of_birth IS NOT NULL;\n```\n\n### Sorting and Limiting\n```sql\n-- ORDER BY (sorting)\nSELECT * FROM products ORDER BY price DESC;\n\n-- Multiple columns sorting\nSELECT * FROM products \nORDER BY category_id ASC, price DESC;\n\n-- LIMIT (pagination)\nSELECT * FROM products ORDER BY price DESC LIMIT 5;\n\n-- OFFSET for pagination\nSELECT * FROM products \nORDER BY created_at DESC \nLIMIT 10 OFFSET 20;  -- Skip first 20, get next 10\n```\n\n## Aggregate Functions\n\n```sql\n-- COUNT\nSELECT COUNT(*) as total_users FROM users;\nSELECT COUNT(DISTINCT category_id) as unique_categories FROM products;\n\n-- SUM\nSELECT SUM(total_amount) as total_revenue FROM orders;\n\n-- AVG\nSELECT AVG(price) as average_price FROM products;\n\n-- MIN and MAX\nSELECT \n    MIN(price) as cheapest_product,\n    MAX(price) as most_expensive_product\nFROM products;\n\n-- GROUP BY\nSELECT \n    category_id,\n    COUNT(*) as product_count,\n    AVG(price) as average_price,\n    MIN(price) as min_price,\n    MAX(price) as max_price\nFROM products \nGROUP BY category_id;\n\n-- HAVING (filter grouped results)\nSELECT \n    category_id,\n    COUNT(*) as product_count,\n    AVG(price) as average_price\nFROM products \nGROUP BY category_id\nHAVING COUNT(*) > 2 AND AVG(price) > 50;\n```\n\n## Joins\n\n### INNER JOIN\n```sql\n-- Products with their category names\nSELECT \n    p.name as product_name,\n    p.price,\n    c.name as category_name\nFROM products p\nINNER JOIN categories c ON p.category_id = c.category_id;\n\n-- Orders with user information\nSELECT \n    o.order_id,\n    o.order_date,\n    o.total_amount,\n    o.status,\n    u.username,\n    CONCAT(u.first_name, ' ', u.last_name) as customer_name\nFROM orders o\nINNER JOIN users u ON o.user_id = u.user_id;\n```\n\n### LEFT JOIN\n```sql\n-- All categories with product count (including categories with no products)\nSELECT \n    c.name as category_name,\n    COUNT(p.product_id) as product_count\nFROM categories c\nLEFT JOIN products p ON c.category_id = p.category_id\nGROUP BY c.category_id, c.name;\n\n-- All users with their order count\nSELECT \n    u.username,\n    CONCAT(u.first_name, ' ', u.last_name) as full_name,\n    COUNT(o.order_id) as order_count,\n    COALESCE(SUM(o.total_amount), 0) as total_spent\nFROM users u\nLEFT JOIN orders o ON u.user_id = o.user_id\nGROUP BY u.user_id, u.username, u.first_name, u.last_name;\n```\n\n### Complex Joins\n```sql\n-- Complete order details with all information\nSELECT \n    o.order_id,\n    o.order_date,\n    o.status,\n    CONCAT(u.first_name, ' ', u.last_name) as customer_name,\n    p.name as product_name,\n    oi.quantity,\n    oi.unit_price,\n    (oi.quantity * oi.unit_price) as line_total\nFROM orders o\nINNER JOIN users u ON o.user_id = u.user_id\nINNER JOIN order_items oi ON o.order_id = oi.order_id\nINNER JOIN products p ON oi.product_id = p.product_id\nORDER BY o.order_id, oi.order_item_id;\n```\n\n## Subqueries\n\n```sql\n-- Products with above-average price\nSELECT name, price\nFROM products\nWHERE price > (SELECT AVG(price) FROM products);\n\n-- Users who have placed orders\nSELECT *\nFROM users\nWHERE user_id IN (SELECT DISTINCT user_id FROM orders);\n\n-- Users who haven't placed any orders\nSELECT *\nFROM users\nWHERE user_id NOT IN (SELECT user_id FROM orders WHERE user_id IS NOT NULL);\n\n-- Most expensive product in each category\nSELECT \n    p1.name,\n    p1.price,\n    c.name as category\nFROM products p1\nINNER JOIN categories c ON p1.category_id = c.category_id\nWHERE p1.price = (\n    SELECT MAX(p2.price)\n    FROM products p2\n    WHERE p2.category_id = p1.category_id\n);\n```\n\n## Advanced Queries\n\n### Window Functions\n```sql\n-- Rank products by price within each category\nSELECT \n    name,\n    price,\n    category_id,\n    RANK() OVER (PARTITION BY category_id ORDER BY price DESC) as price_rank,\n    ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY price DESC) as row_num\nFROM products;\n\n-- Running total of order amounts\nSELECT \n    order_id,\n    order_date,\n    total_amount,\n    SUM(total_amount) OVER (ORDER BY order_date) as running_total\nFROM orders\nORDER BY order_date;\n\n-- Monthly sales with previous month comparison\nSELECT \n    DATE_FORMAT(order_date, '%Y-%m') as month,\n    SUM(total_amount) as monthly_sales,\n    LAG(SUM(total_amount)) OVER (ORDER BY DATE_FORMAT(order_date, '%Y-%m')) as prev_month_sales\nFROM orders\nGROUP BY DATE_FORMAT(order_date, '%Y-%m')\nORDER BY month;\n```\n\n### Common Table Expressions (CTEs)\n```sql\n-- Customer order summary using CTE\nWITH customer_summary AS (\n    SELECT \n        u.user_id,\n        CONCAT(u.first_name, ' ', u.last_name) as customer_name,\n        COUNT(o.order_id) as order_count,\n        SUM(o.total_amount) as total_spent,\n        AVG(o.total_amount) as avg_order_value\n    FROM users u\n    LEFT JOIN orders o ON u.user_id = o.user_id\n    GROUP BY u.user_id, u.first_name, u.last_name\n)\nSELECT \n    customer_name,\n    order_count,\n    total_spent,\n    avg_order_value,\n    CASE \n        WHEN total_spent > 1000 THEN 'VIP'\n        WHEN total_spent > 500 THEN 'Premium'\n        WHEN total_spent > 0 THEN 'Regular'\n        ELSE 'No Orders'\n    END as customer_tier\nFROM customer_summary\nORDER BY total_spent DESC;\n```\n\n### Recursive CTE (for hierarchical data)\n```sql\n-- Add a simple hierarchy example\nCREATE TABLE categories_hierarchy (\n    category_id INT PRIMARY KEY,\n    name VARCHAR(50),\n    parent_id INT,\n    FOREIGN KEY (parent_id) REFERENCES categories_hierarchy(category_id)\n);\n\nINSERT INTO categories_hierarchy VALUES\n(1, 'Electronics', NULL),\n(2, 'Computers', 1),\n(3, 'Phones', 1),\n(4, 'Laptops', 2),\n(5, 'Desktops', 2),\n(6, 'Smartphones', 3),\n(7, 'Gaming Laptops', 4);\n\n-- Recursive CTE to get category hierarchy\nWITH RECURSIVE category_tree AS (\n    -- Base case: root categories\n    SELECT category_id, name, parent_id, 0 as level, name as path\n    FROM categories_hierarchy\n    WHERE parent_id IS NULL\n    \n    UNION ALL\n    \n    -- Recursive case: child categories\n    SELECT \n        c.category_id, \n        c.name, \n        c.parent_id, \n        ct.level + 1,\n        CONCAT(ct.path, ' > ', c.name)\n    FROM categories_hierarchy c\n    INNER JOIN category_tree ct ON c.parent_id = ct.category_id\n)\nSELECT \n    REPEAT('  ', level) || name as indented_name,\n    level,\n    path\nFROM category_tree\nORDER BY path;\n```\n\n## Data Modification\n\n### INSERT\n```sql\n-- Insert single record\nINSERT INTO users (username, email, first_name, last_name, date_of_birth)\nVALUES ('new_user', 'newuser@example.com', 'New', 'User', '1990-01-01');\n\n-- Insert multiple records\nINSERT INTO products (name, description, price, stock_quantity, category_id) VALUES\n('Product A', 'Description A', 29.99, 50, 1),\n('Product B', 'Description B', 39.99, 30, 2),\n('Product C', 'Description C', 49.99, 20, 3);\n\n-- Insert from SELECT\nINSERT INTO products (name, description, price, stock_quantity, category_id)\nSELECT \n    CONCAT('Copy of ', name),\n    CONCAT('Duplicate: ', description),\n    price * 0.8,\n    0,\n    category_id\nFROM products\nWHERE category_id = 1;\n```\n\n### UPDATE\n```sql\n-- Update single record\nUPDATE products \nSET price = 899.99, stock_quantity = stock_quantity - 1\nWHERE product_id = 3;\n\n-- Update multiple records\nUPDATE products \nSET price = price * 1.1\nWHERE category_id = 2;\n\n-- Update with JOIN\nUPDATE products p\nINNER JOIN categories c ON p.category_id = c.category_id\nSET p.price = p.price * 0.9\nWHERE c.name = 'Electronics';\n\n-- Conditional update\nUPDATE products\nSET stock_quantity = CASE\n    WHEN stock_quantity < 10 THEN stock_quantity + 50\n    WHEN stock_quantity < 25 THEN stock_quantity + 25\n    ELSE stock_quantity\nEND\nWHERE category_id IN (1, 2, 3);\n```\n\n### DELETE\n```sql\n-- Delete specific records\nDELETE FROM order_items WHERE order_id = 1;\n\n-- Delete with condition\nDELETE FROM products WHERE stock_quantity = 0;\n\n-- Delete with JOIN\nDELETE p FROM products p\nINNER JOIN categories c ON p.category_id = c.category_id\nWHERE c.name = 'Discontinued';\n```\n\n## Practical Business Queries\n\n### Sales Analytics\n```sql\n-- Top selling products\nSELECT \n    p.name,\n    SUM(oi.quantity) as total_sold,\n    SUM(oi.quantity * oi.unit_price) as total_revenue,\n    AVG(oi.unit_price) as avg_selling_price\nFROM products p\nINNER JOIN order_items oi ON p.product_id = oi.product_id\nINNER JOIN orders o ON oi.order_id = o.order_id\nWHERE o.status != 'cancelled'\nGROUP BY p.product_id, p.name\nORDER BY total_revenue DESC\nLIMIT 10;\n\n-- Monthly sales trends\nSELECT \n    DATE_FORMAT(order_date, '%Y-%m') as month,\n    COUNT(DISTINCT order_id) as total_orders,\n    COUNT(DISTINCT user_id) as unique_customers,\n    SUM(total_amount) as total_revenue,\n    AVG(total_amount) as avg_order_value\nFROM orders\nWHERE status != 'cancelled'\n    AND order_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)\nGROUP BY DATE_FORMAT(order_date, '%Y-%m')\nORDER BY month;\n\n-- Customer lifetime value\nSELECT \n    u.user_id,\n    CONCAT(u.first_name, ' ', u.last_name) as customer_name,\n    COUNT(o.order_id) as total_orders,\n    SUM(o.total_amount) as lifetime_value,\n    AVG(o.total_amount) as avg_order_value,\n    MIN(o.order_date) as first_order_date,\n    MAX(o.order_date) as last_order_date,\n    DATEDIFF(MAX(o.order_date), MIN(o.order_date)) as customer_lifespan_days\nFROM users u\nINNER JOIN orders o ON u.user_id = o.user_id\nWHERE o.status != 'cancelled'\nGROUP BY u.user_id, u.first_name, u.last_name\nHAVING total_orders > 1\nORDER BY lifetime_value DESC;\n```\n\n### Inventory Management\n```sql\n-- Low stock alert\nSELECT \n    p.name,\n    p.stock_quantity,\n    c.name as category,\n    CASE \n        WHEN p.stock_quantity = 0 THEN 'OUT OF STOCK'\n        WHEN p.stock_quantity < 10 THEN 'CRITICAL LOW'\n        WHEN p.stock_quantity < 25 THEN 'LOW'\n        ELSE 'OK'\n    END as stock_status\nFROM products p\nINNER JOIN categories c ON p.category_id = c.category_id\nWHERE p.stock_quantity < 25\nORDER BY p.stock_quantity ASC;\n\n-- Products that need restocking based on sales velocity\nSELECT \n    p.name,\n    p.stock_quantity,\n    COALESCE(SUM(oi.quantity), 0) as total_sold_last_30_days,\n    ROUND(COALESCE(SUM(oi.quantity), 0) / 30.0, 2) as avg_daily_sales,\n    CASE \n        WHEN COALESCE(SUM(oi.quantity), 0) = 0 THEN 'N/A'\n        ELSE ROUND(p.stock_quantity / (COALESCE(SUM(oi.quantity), 0) / 30.0), 0)\n    END as days_of_stock_remaining\nFROM products p\nLEFT JOIN order_items oi ON p.product_id = oi.product_id\nLEFT JOIN orders o ON oi.order_id = o.order_id \n    AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)\n    AND o.status != 'cancelled'\nGROUP BY p.product_id, p.name, p.stock_quantity\nHAVING (COALESCE(SUM(oi.quantity), 0) / 30.0) > 0 \n    AND (p.stock_quantity / (COALESCE(SUM(oi.quantity), 0) / 30.0)) < 14\nORDER BY days_of_stock_remaining ASC;\n```\n\n## Performance Optimization\n\n### Indexes\n```sql\n-- Create indexes for better performance\nCREATE INDEX idx_products_category ON products(category_id);\nCREATE INDEX idx_products_price ON products(price);\nCREATE INDEX idx_orders_user_date ON orders(user_id, order_date);\nCREATE INDEX idx_orders_status ON orders(status);\nCREATE INDEX idx_order_items_order ON order_items(order_id);\nCREATE INDEX idx_order_items_product ON order_items(product_id);\n\n-- Composite index for common queries\nCREATE INDEX idx_products_category_price ON products(category_id, price);\n\n-- Check index usage\nEXPLAIN SELECT * FROM products WHERE category_id = 1 AND price > 100;\n```\n\n### Query Optimization Tips\n```sql\n-- Use EXISTS instead of IN for better performance with large datasets\nSELECT * FROM users u\nWHERE EXISTS (SELECT 1 FROM orders o WHERE o.user_id = u.user_id);\n\n-- Use LIMIT to avoid large result sets\nSELECT * FROM products ORDER BY created_at DESC LIMIT 20;\n\n-- Use proper WHERE clauses to filter early\nSELECT \n    p.name,\n    SUM(oi.quantity) as total_sold\nFROM products p\nINNER JOIN order_items oi ON p.product_id = oi.product_id\nINNER JOIN orders o ON oi.order_id = o.order_id\nWHERE o.order_date >= '2024-01-01'  -- Filter early\n    AND o.status != 'cancelled'\nGROUP BY p.product_id, p.name\nORDER BY total_sold DESC;\n```\n\n## Best Practices\n\n1. **Always use meaningful table and column names**\n2. **Define proper data types and constraints**\n3. **Use foreign keys to maintain referential integrity**\n4. **Create indexes on frequently queried columns**\n5. **Avoid SELECT * in production queries**\n6. **Use transactions for data consistency**\n7. **Validate data before insertion**\n8. **Use parameterized queries to prevent SQL injection**\n9. **Regular database maintenance (analyze, optimize)**\n10. **Monitor query performance and optimize slow queries**\n\nThis comprehensive SQL tutorial provides the foundation for working with relational databases effectively in real-world applications!"}