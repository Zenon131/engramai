[
  {
    "instruction": "How do I reverse a string in Python?",
    "input": "",
    "output": "You can reverse a string in Python using several methods:\n\n1. **Slicing (most Pythonic):**\n```python\ntext = \"hello\"\nreversed_text = text[::-1]\nprint(reversed_text)  # \"olleh\"\n```\n\n2. **Using reversed() function:**\n```python\ntext = \"hello\"\nreversed_text = ''.join(reversed(text))\nprint(reversed_text)  # \"olleh\"\n```\n\n3. **Manual reversal:**\n```python\ndef reverse_string(s):\n    result = \"\"\n    for char in s:\n        result = char + result\n    return result\n\nprint(reverse_string(\"hello\"))  # \"olleh\"\n```\n\nThe slicing method `[::-1]` is the most efficient and commonly used approach."
  },
  {
    "instruction": "Explain the difference between `let`, `const`, and `var` in JavaScript",
    "input": "",
    "output": "Here are the key differences between `let`, `const`, and `var` in JavaScript:\n\n## Scope\n- **`var`**: Function-scoped or globally-scoped\n- **`let`**: Block-scoped\n- **`const`**: Block-scoped\n\n## Hoisting\n- **`var`**: Hoisted and initialized with `undefined`\n- **`let`**: Hoisted but not initialized (temporal dead zone)\n- **`const`**: Hoisted but not initialized (temporal dead zone)\n\n## Reassignment\n- **`var`**: Can be reassigned\n- **`let`**: Can be reassigned\n- **`const`**: Cannot be reassigned (but objects/arrays can be mutated)\n\n## Examples:\n```javascript\n// Scope example\nfunction example() {\n  if (true) {\n    var a = 1;  // Function-scoped\n    let b = 2;  // Block-scoped\n    const c = 3; // Block-scoped\n  }\n  console.log(a); // 1 (accessible)\n  console.log(b); // ReferenceError\n  console.log(c); // ReferenceError\n}\n\n// Reassignment\nlet x = 1;\nx = 2; // OK\n\nconst y = 1;\ny = 2; // TypeError\n\nconst obj = { name: 'John' };\nobj.name = 'Jane'; // OK (mutation allowed)\n```\n\n**Best Practice**: Use `const` by default, `let` when you need to reassign, avoid `var`."
  },
  {
    "instruction": "How do I handle exceptions in Java?",
    "input": "",
    "output": "Java provides robust exception handling using try-catch-finally blocks:\n\n## Basic Syntax\n```java\ntry {\n    // Code that might throw an exception\n} catch (ExceptionType e) {\n    // Handle the exception\n} finally {\n    // Code that always executes\n}\n```\n\n## Multiple Catch Blocks\n```java\ntry {\n    int result = 10 / 0;\n    String text = null;\n    int length = text.length();\n} catch (ArithmeticException e) {\n    System.out.println(\"Division by zero: \" + e.getMessage());\n} catch (NullPointerException e) {\n    System.out.println(\"Null pointer: \" + e.getMessage());\n} catch (Exception e) {\n    System.out.println(\"General exception: \" + e.getMessage());\n} finally {\n    System.out.println(\"This always executes\");\n}\n```\n\n## Try-with-Resources (Java 7+)\n```java\ntry (FileReader file = new FileReader(\"data.txt\");\n     BufferedReader reader = new BufferedReader(file)) {\n    return reader.readLine();\n} catch (IOException e) {\n    System.out.println(\"File error: \" + e.getMessage());\n}\n// Resources automatically closed\n```\n\n## Throwing Exceptions\n```java\npublic void validateAge(int age) throws IllegalArgumentException {\n    if (age < 0) {\n        throw new IllegalArgumentException(\"Age cannot be negative\");\n    }\n}\n```\n\n## Custom Exceptions\n```java\npublic class InvalidEmailException extends Exception {\n    public InvalidEmailException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "instruction": "What's the difference between `==` and `===` in JavaScript?",
    "input": "",
    "output": "The difference lies in type coercion:\n\n## `==` (Equality Operator)\n- Performs **type coercion** before comparison\n- Converts operands to the same type, then compares\n- Can lead to unexpected results\n\n## `===` (Strict Equality Operator)\n- **No type coercion**\n- Compares both value AND type\n- Recommended for most cases\n\n## Examples:\n```javascript\n// Type coercion with ==\nconsole.log(5 == '5');    // true (string '5' converted to number)\nconsole.log(true == 1);   // true (boolean converted to number)\nconsole.log(null == undefined); // true (special case)\nconsole.log(0 == false);  // true (false converted to 0)\nconsole.log('' == 0);     // true (empty string converted to 0)\n\n// Strict comparison with ===\nconsole.log(5 === '5');   // false (different types)\nconsole.log(true === 1);  // false (different types)\nconsole.log(null === undefined); // false (different types)\nconsole.log(0 === false); // false (different types)\nconsole.log('' === 0);    // false (different types)\n\n// Same type comparisons work the same\nconsole.log(5 === 5);     // true\nconsole.log('hello' === 'hello'); // true\nconsole.log(true === true); // true\n```\n\n## Best Practice\nAlways use `===` and `!==` unless you specifically need type coercion. This prevents bugs from unexpected type conversions:\n\n```javascript\n// Good\nif (user.age === 18) { /* ... */ }\n\n// Avoid\nif (user.age == 18) { /* ... */ }\n```"
  },
  {
    "instruction": "How do I create a simple REST API endpoint in Python using Flask?",
    "input": "",
    "output": "Here's how to create a simple REST API with Flask:\n\n## Installation\n```bash\npip install flask\n```\n\n## Basic API Structure\n```python\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Sample data\nbooks = [\n    {'id': 1, 'title': '1984', 'author': 'George Orwell'},\n    {'id': 2, 'title': 'To Kill a Mockingbird', 'author': 'Harper Lee'}\n]\n\n# GET all books\n@app.route('/api/books', methods=['GET'])\ndef get_books():\n    return jsonify({'books': books})\n\n# GET specific book\n@app.route('/api/books/<int:book_id>', methods=['GET'])\ndef get_book(book_id):\n    book = next((book for book in books if book['id'] == book_id), None)\n    if book:\n        return jsonify({'book': book})\n    return jsonify({'error': 'Book not found'}), 404\n\n# POST new book\n@app.route('/api/books', methods=['POST'])\ndef create_book():\n    if not request.json or 'title' not in request.json:\n        return jsonify({'error': 'Title is required'}), 400\n    \n    new_book = {\n        'id': len(books) + 1,\n        'title': request.json['title'],\n        'author': request.json.get('author', '')\n    }\n    books.append(new_book)\n    return jsonify({'book': new_book}), 201\n\n# PUT update book\n@app.route('/api/books/<int:book_id>', methods=['PUT'])\ndef update_book(book_id):\n    book = next((book for book in books if book['id'] == book_id), None)\n    if not book:\n        return jsonify({'error': 'Book not found'}), 404\n    \n    book['title'] = request.json.get('title', book['title'])\n    book['author'] = request.json.get('author', book['author'])\n    return jsonify({'book': book})\n\n# DELETE book\n@app.route('/api/books/<int:book_id>', methods=['DELETE'])\ndef delete_book(book_id):\n    global books\n    books = [book for book in books if book['id'] != book_id]\n    return jsonify({'message': 'Book deleted'})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n## Testing the API\n```bash\n# GET all books\ncurl http://localhost:5000/api/books\n\n# POST new book\ncurl -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"Brave New World\",\"author\":\"Aldous Huxley\"}' \\\n  http://localhost:5000/api/books\n\n# GET specific book\ncurl http://localhost:5000/api/books/1\n\n# PUT update book\ncurl -X PUT -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"Nineteen Eighty-Four\"}' \\\n  http://localhost:5000/api/books/1\n\n# DELETE book\ncurl -X DELETE http://localhost:5000/api/books/1\n```\n\nThis creates a full CRUD (Create, Read, Update, Delete) API for managing books."
  },
  {
    "instruction": "Explain how closures work in JavaScript with examples",
    "input": "",
    "output": "A **closure** in JavaScript is a function that has access to variables from its outer (enclosing) scope even after the outer function has finished executing.\n\n## Basic Closure Example\n```javascript\nfunction outerFunction(x) {\n    // Outer variable\n    \n    function innerFunction(y) {\n        // Inner function has access to 'x'\n        return x + y;\n    }\n    \n    return innerFunction;\n}\n\nconst addFive = outerFunction(5);\nconsole.log(addFive(3)); // 8\n// 'x' (5) is still accessible even after outerFunction finished\n```\n\n## Practical Examples\n\n### 1. Counter Function\n```javascript\nfunction createCounter() {\n    let count = 0;\n    \n    return function() {\n        count++;\n        return count;\n    };\n}\n\nconst counter1 = createCounter();\nconst counter2 = createCounter();\n\nconsole.log(counter1()); // 1\nconsole.log(counter1()); // 2\nconsole.log(counter2()); // 1 (independent counter)\n```\n\n### 2. Private Variables\n```javascript\nfunction createBankAccount(initialBalance) {\n    let balance = initialBalance;\n    \n    return {\n        deposit: function(amount) {\n            balance += amount;\n            return balance;\n        },\n        withdraw: function(amount) {\n            if (amount <= balance) {\n                balance -= amount;\n                return balance;\n            }\n            return \"Insufficient funds\";\n        },\n        getBalance: function() {\n            return balance;\n        }\n    };\n}\n\nconst account = createBankAccount(100);\nconsole.log(account.deposit(50));  // 150\nconsole.log(account.withdraw(30)); // 120\nconsole.log(account.getBalance()); // 120\n// 'balance' is private - cannot be accessed directly\n```\n\n### 3. Function Factory\n```javascript\nfunction createMultiplier(multiplier) {\n    return function(number) {\n        return number * multiplier;\n    };\n}\n\nconst double = createMultiplier(2);\nconst triple = createMultiplier(3);\n\nconsole.log(double(5)); // 10\nconsole.log(triple(5)); // 15\n```\n\n### 4. Event Handlers with Closures\n```javascript\nfunction setupButtons() {\n    for (let i = 0; i < 3; i++) {\n        const button = document.createElement('button');\n        button.textContent = `Button ${i}`;\n        \n        // Closure captures the current value of 'i'\n        button.addEventListener('click', function() {\n            console.log(`Button ${i} clicked`);\n        });\n        \n        document.body.appendChild(button);\n    }\n}\n```\n\n## Key Points\n- Closures give you access to outer function's scope from inner function\n- Variables are \"remembered\" even after outer function returns\n- Each closure has its own copy of the outer variables\n- Useful for data privacy and creating specialized functions\n- Common in module patterns, callbacks, and event handlers"
  },
  {
    "instruction": "How do I implement a binary search algorithm in Python?",
    "input": "",
    "output": "Binary search is an efficient algorithm for finding an item in a sorted array. Here are both iterative and recursive implementations:\n\n## Iterative Implementation\n```python\ndef binary_search_iterative(arr, target):\n    \"\"\"\n    Binary search using iteration.\n    Returns index of target if found, -1 otherwise.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\n# Example usage\nnumbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nresult = binary_search_iterative(numbers, 7)\nprint(f\"Index of 7: {result}\")  # Index of 7: 3\n```\n\n## Recursive Implementation\n```python\ndef binary_search_recursive(arr, target, left=0, right=None):\n    \"\"\"\n    Binary search using recursion.\n    Returns index of target if found, -1 otherwise.\n    \"\"\"\n    if right is None:\n        right = len(arr) - 1\n    \n    # Base case: element not found\n    if left > right:\n        return -1\n    \n    mid = (left + right) // 2\n    \n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search_recursive(arr, target, mid + 1, right)\n    else:\n        return binary_search_recursive(arr, target, left, mid - 1)\n\n# Example usage\nnumbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nresult = binary_search_recursive(numbers, 13)\nprint(f\"Index of 13: {result}\")  # Index of 13: 6\n```\n\n## Enhanced Version with Better Error Handling\n```python\ndef binary_search(arr, target):\n    \"\"\"\n    Enhanced binary search with input validation.\n    \"\"\"\n    if not arr:\n        return -1\n    \n    # Check if array is sorted\n    if not all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        raise ValueError(\"Array must be sorted for binary search\")\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        # Prevent integer overflow (important in other languages)\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\ndef binary_search_leftmost(arr, target):\n    \"\"\"\n    Find the leftmost occurrence of target.\n    \"\"\"\n    left, right = 0, len(arr)\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left if left < len(arr) and arr[left] == target else -1\n\n# Testing\nif __name__ == \"__main__\":\n    # Test data\n    sorted_array = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n    \n    # Test cases\n    test_cases = [7, 1, 19, 10, 0, 25]\n    \n    for target in test_cases:\n        index = binary_search(sorted_array, target)\n        if index != -1:\n            print(f\"Found {target} at index {index}\")\n        else:\n            print(f\"{target} not found in array\")\n    \n    # Test with duplicates\n    duplicates = [1, 2, 2, 2, 3, 4, 5]\n    leftmost = binary_search_leftmost(duplicates, 2)\n    print(f\"Leftmost occurrence of 2: {leftmost}\")  # 1\n```\n\n## Time and Space Complexity\n- **Time Complexity**: O(log n)\n- **Space Complexity**: \n  - Iterative: O(1)\n  - Recursive: O(log n) due to call stack\n\n## Key Points\n- Array must be sorted\n- Very efficient for large datasets\n- Eliminates half the search space in each iteration\n- Much faster than linear search for sorted data"
  },
  {
    "instruction": "How do I use async/await in JavaScript?",
    "input": "",
    "output": "Async/await is a syntax that makes working with asynchronous code in JavaScript much cleaner and more readable.\n\n## Basic Syntax\n```javascript\n// Declare an async function\nasync function fetchData() {\n    try {\n        // Await pauses execution until promise resolves\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n}\n\n// Call async function\nfetchData()\n    .then(data => console.log(data))\n    .catch(error => console.error(error));\n```\n\n## Comparison: Promises vs Async/Await\n\n### Using Promises (old way)\n```javascript\nfunction fetchUserData(userId) {\n    return fetch(`/api/users/${userId}`)\n        .then(response => response.json())\n        .then(user => {\n            return fetch(`/api/posts/${user.id}`);\n        })\n        .then(response => response.json())\n        .then(posts => {\n            return { user, posts };\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            throw error;\n        });\n}\n```\n\n### Using Async/Await (modern way)\n```javascript\nasync function fetchUserData(userId) {\n    try {\n        const userResponse = await fetch(`/api/users/${userId}`);\n        const user = await userResponse.json();\n        \n        const postsResponse = await fetch(`/api/posts/${user.id}`);\n        const posts = await postsResponse.json();\n        \n        return { user, posts };\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n```\n\n## Multiple Async Operations\n\n### Sequential Execution\n```javascript\nasync function processDataSequentially() {\n    console.log('Starting sequential processing...');\n    \n    const data1 = await fetchData('endpoint1');  // Waits for completion\n    const data2 = await fetchData('endpoint2');  // Then starts this\n    const data3 = await fetchData('endpoint3');  // Then starts this\n    \n    return [data1, data2, data3];\n}\n```\n\n### Parallel Execution\n```javascript\nasync function processDataInParallel() {\n    console.log('Starting parallel processing...');\n    \n    // Start all operations simultaneously\n    const [data1, data2, data3] = await Promise.all([\n        fetchData('endpoint1'),\n        fetchData('endpoint2'),\n        fetchData('endpoint3')\n    ]);\n    \n    return [data1, data2, data3];\n}\n\n// Alternative parallel approach\nasync function processDataInParallelAlt() {\n    // Start all promises\n    const promise1 = fetchData('endpoint1');\n    const promise2 = fetchData('endpoint2');\n    const promise3 = fetchData('endpoint3');\n    \n    // Wait for all to complete\n    const data1 = await promise1;\n    const data2 = await promise2;\n    const data3 = await promise3;\n    \n    return [data1, data2, data3];\n}\n```\n\n## Error Handling\n```javascript\nasync function robustDataFetching() {\n    try {\n        const response = await fetch('/api/data');\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        return data;\n    } catch (error) {\n        if (error instanceof TypeError) {\n            console.error('Network error:', error.message);\n        } else {\n            console.error('Other error:', error.message);\n        }\n        \n        // Return default data or re-throw\n        return { error: 'Failed to fetch data' };\n    }\n}\n```\n\n## Async Loops\n```javascript\n// Process items sequentially\nasync function processItemsSequentially(items) {\n    const results = [];\n    \n    for (const item of items) {\n        const result = await processItem(item);\n        results.push(result);\n    }\n    \n    return results;\n}\n\n// Process items in parallel\nasync function processItemsInParallel(items) {\n    const promises = items.map(item => processItem(item));\n    return await Promise.all(promises);\n}\n\n// Process with limited concurrency\nasync function processWithLimitedConcurrency(items, limit = 3) {\n    const results = [];\n    \n    for (let i = 0; i < items.length; i += limit) {\n        const batch = items.slice(i, i + limit);\n        const batchPromises = batch.map(item => processItem(item));\n        const batchResults = await Promise.all(batchPromises);\n        results.push(...batchResults);\n    }\n    \n    return results;\n}\n```\n\n## Real-World Example: API Client\n```javascript\nclass ApiClient {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n    \n    async request(endpoint, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        \n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            },\n            ...options\n        };\n        \n        try {\n            const response = await fetch(url, config);\n            \n            if (!response.ok) {\n                throw new Error(`API error: ${response.status}`);\n            }\n            \n            return await response.json();\n        } catch (error) {\n            console.error(`Request failed for ${endpoint}:`, error);\n            throw error;\n        }\n    }\n    \n    async get(endpoint) {\n        return this.request(endpoint, { method: 'GET' });\n    }\n    \n    async post(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'POST',\n            body: JSON.stringify(data)\n        });\n    }\n}\n\n// Usage\nconst api = new ApiClient('https://jsonplaceholder.typicode.com');\n\nasync function main() {\n    try {\n        const posts = await api.get('/posts');\n        console.log(`Fetched ${posts.length} posts`);\n        \n        const newPost = await api.post('/posts', {\n            title: 'My New Post',\n            body: 'This is the content',\n            userId: 1\n        });\n        console.log('Created post:', newPost);\n    } catch (error) {\n        console.error('Application error:', error);\n    }\n}\n\nmain();\n```\n\n## Key Points\n- `async` functions always return a Promise\n- `await` can only be used inside `async` functions\n- Use try/catch for error handling\n- Consider whether operations should be sequential or parallel\n- Async/await makes asynchronous code look synchronous and easier to read"
  },
  {
    "instruction": "How do I connect to a database in Java using JDBC?",
    "input": "",
    "output": "JDBC (Java Database Connectivity) allows Java applications to connect to databases. Here's a comprehensive guide:\n\n## 1. Add Database Driver Dependency\n\n### Maven (pom.xml)\n```xml\n<dependencies>\n    <!-- MySQL -->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.33</version>\n    </dependency>\n    \n    <!-- PostgreSQL -->\n    <dependency>\n        <groupId>org.postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n        <version>42.6.0</version>\n    </dependency>\n    \n    <!-- SQLite -->\n    <dependency>\n        <groupId>org.xerial</groupId>\n        <artifactId>sqlite-jdbc</artifactId>\n        <version>3.42.0.0</version>\n    </dependency>\n</dependencies>\n```\n\n## 2. Basic Connection\n```java\nimport java.sql.*;\n\npublic class DatabaseConnection {\n    // Database connection parameters\n    private static final String DB_URL = \"jdbc:mysql://localhost:3306/mydatabase\";\n    private static final String DB_USER = \"username\";\n    private static final String DB_PASSWORD = \"password\";\n    \n    public static Connection getConnection() throws SQLException {\n        try {\n            // Optional: Load driver (not needed for JDBC 4.0+)\n            // Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            \n            return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);\n        } catch (SQLException e) {\n            System.err.println(\"Database connection failed: \" + e.getMessage());\n            throw e;\n        }\n    }\n}\n```\n\n## 3. Complete CRUD Operations Example\n```java\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UserDAO {\n    private Connection connection;\n    \n    public UserDAO() {\n        try {\n            this.connection = DatabaseConnection.getConnection();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    // CREATE - Insert user\n    public boolean createUser(String name, String email, int age) {\n        String sql = \"INSERT INTO users (name, email, age) VALUES (?, ?, ?)\";\n        \n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n            stmt.setString(1, name);\n            stmt.setString(2, email);\n            stmt.setInt(3, age);\n            \n            int rowsAffected = stmt.executeUpdate();\n            return rowsAffected > 0;\n            \n        } catch (SQLException e) {\n            System.err.println(\"Error creating user: \" + e.getMessage());\n            return false;\n        }\n    }\n    \n    // READ - Get user by ID\n    public User getUserById(int id) {\n        String sql = \"SELECT * FROM users WHERE id = ?\";\n        \n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n            stmt.setInt(1, id);\n            \n            try (ResultSet rs = stmt.executeQuery()) {\n                if (rs.next()) {\n                    return new User(\n                        rs.getInt(\"id\"),\n                        rs.getString(\"name\"),\n                        rs.getString(\"email\"),\n                        rs.getInt(\"age\")\n                    );\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error getting user: \" + e.getMessage());\n        }\n        \n        return null;\n    }\n    \n    // READ - Get all users\n    public List<User> getAllUsers() {\n        List<User> users = new ArrayList<>();\n        String sql = \"SELECT * FROM users\";\n        \n        try (Statement stmt = connection.createStatement();\n             ResultSet rs = stmt.executeQuery(sql)) {\n            \n            while (rs.next()) {\n                users.add(new User(\n                    rs.getInt(\"id\"),\n                    rs.getString(\"name\"),\n                    rs.getString(\"email\"),\n                    rs.getInt(\"age\")\n                ));\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error getting users: \" + e.getMessage());\n        }\n        \n        return users;\n    }\n    \n    // UPDATE - Update user\n    public boolean updateUser(int id, String name, String email, int age) {\n        String sql = \"UPDATE users SET name = ?, email = ?, age = ? WHERE id = ?\";\n        \n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n            stmt.setString(1, name);\n            stmt.setString(2, email);\n            stmt.setInt(3, age);\n            stmt.setInt(4, id);\n            \n            int rowsAffected = stmt.executeUpdate();\n            return rowsAffected > 0;\n            \n        } catch (SQLException e) {\n            System.err.println(\"Error updating user: \" + e.getMessage());\n            return false;\n        }\n    }\n    \n    // DELETE - Delete user\n    public boolean deleteUser(int id) {\n        String sql = \"DELETE FROM users WHERE id = ?\";\n        \n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n            stmt.setInt(1, id);\n            \n            int rowsAffected = stmt.executeUpdate();\n            return rowsAffected > 0;\n            \n        } catch (SQLException e) {\n            System.err.println(\"Error deleting user: \" + e.getMessage());\n            return false;\n        }\n    }\n    \n    // Close connection\n    public void close() {\n        try {\n            if (connection != null && !connection.isClosed()) {\n                connection.close();\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error closing connection: \" + e.getMessage());\n        }\n    }\n}\n\n// User model class\nclass User {\n    private int id;\n    private String name;\n    private String email;\n    private int age;\n    \n    public User(int id, String name, String email, int age) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.age = age;\n    }\n    \n    // Getters and setters\n    public int getId() { return id; }\n    public String getName() { return name; }\n    public String getEmail() { return email; }\n    public int getAge() { return age; }\n    \n    @Override\n    public String toString() {\n        return String.format(\"User{id=%d, name='%s', email='%s', age=%d}\", \n                           id, name, email, age);\n    }\n}\n```\n\n## 4. Connection Pooling (Production Ready)\n```java\nimport com.zaxxer.hikari.HikariConfig;\nimport com.zaxxer.hikari.HikariDataSource;\nimport javax.sql.DataSource;\n\npublic class ConnectionPool {\n    private static HikariDataSource dataSource;\n    \n    static {\n        HikariConfig config = new HikariConfig();\n        config.setJdbcUrl(\"jdbc:mysql://localhost:3306/mydatabase\");\n        config.setUsername(\"username\");\n        config.setPassword(\"password\");\n        config.setMaximumPoolSize(20);\n        config.setMinimumIdle(5);\n        config.setConnectionTimeout(30000);\n        config.setIdleTimeout(600000);\n        config.setMaxLifetime(1800000);\n        \n        dataSource = new HikariDataSource(config);\n    }\n    \n    public static Connection getConnection() throws SQLException {\n        return dataSource.getConnection();\n    }\n    \n    public static void closePool() {\n        if (dataSource != null) {\n            dataSource.close();\n        }\n    }\n}\n```\n\n## 5. Transaction Management\n```java\npublic class TransactionExample {\n    public boolean transferMoney(int fromAccountId, int toAccountId, double amount) {\n        Connection conn = null;\n        try {\n            conn = DatabaseConnection.getConnection();\n            conn.setAutoCommit(false); // Start transaction\n            \n            // Debit from account\n            String debitSQL = \"UPDATE accounts SET balance = balance - ? WHERE id = ?\";\n            try (PreparedStatement debitStmt = conn.prepareStatement(debitSQL)) {\n                debitStmt.setDouble(1, amount);\n                debitStmt.setInt(2, fromAccountId);\n                debitStmt.executeUpdate();\n            }\n            \n            // Credit to account\n            String creditSQL = \"UPDATE accounts SET balance = balance + ? WHERE id = ?\";\n            try (PreparedStatement creditStmt = conn.prepareStatement(creditSQL)) {\n                creditStmt.setDouble(1, amount);\n                creditStmt.setInt(2, toAccountId);\n                creditStmt.executeUpdate();\n            }\n            \n            conn.commit(); // Commit transaction\n            return true;\n            \n        } catch (SQLException e) {\n            try {\n                if (conn != null) {\n                    conn.rollback(); // Rollback on error\n                }\n            } catch (SQLException rollbackEx) {\n                System.err.println(\"Rollback failed: \" + rollbackEx.getMessage());\n            }\n            System.err.println(\"Transaction failed: \" + e.getMessage());\n            return false;\n        } finally {\n            try {\n                if (conn != null) {\n                    conn.setAutoCommit(true); // Reset auto-commit\n                    conn.close();\n                }\n            } catch (SQLException e) {\n                System.err.println(\"Error closing connection: \" + e.getMessage());\n            }\n        }\n    }\n}\n```\n\n## 6. Usage Example\n```java\npublic class Main {\n    public static void main(String[] args) {\n        UserDAO userDAO = new UserDAO();\n        \n        try {\n            // Create users\n            userDAO.createUser(\"John Doe\", \"john@example.com\", 25);\n            userDAO.createUser(\"Jane Smith\", \"jane@example.com\", 30);\n            \n            // Get all users\n            List<User> users = userDAO.getAllUsers();\n            users.forEach(System.out::println);\n            \n            // Get specific user\n            User user = userDAO.getUserById(1);\n            if (user != null) {\n                System.out.println(\"Found user: \" + user);\n            }\n            \n            // Update user\n            userDAO.updateUser(1, \"John Updated\", \"john.updated@example.com\", 26);\n            \n            // Delete user\n            userDAO.deleteUser(2);\n            \n        } finally {\n            userDAO.close();\n        }\n    }\n}\n```\n\n## Key Best Practices\n- Always use PreparedStatement to prevent SQL injection\n- Use try-with-resources for automatic resource management\n- Implement connection pooling for production applications\n- Handle transactions properly with commit/rollback\n- Close connections, statements, and result sets\n- Use proper exception handling"
  },
  {
    "instruction": "What are Swift optionals and how do I use them safely?",
    "input": "",
    "output": "Swift optionals are a powerful feature that represents values that might be absent (nil). They help prevent null pointer exceptions common in other languages.\n\n## What are Optionals?\n```swift\n// Regular variable - must have a value\nvar name: String = \"John\"  // Cannot be nil\n\n// Optional variable - may or may not have a value\nvar optionalName: String? = \"John\"  // Can be nil\nvar anotherOptional: String? = nil   // Explicitly nil\n```\n\n## Creating Optionals\n```swift\n// Implicit optional (automatically becomes optional)\nlet number = Int(\"123\")      // Int? because conversion might fail\nlet invalidNumber = Int(\"abc\") // Returns nil\n\n// Explicit optional declaration\nvar age: Int? = 25\nvar email: String? = nil\n\n// Arrays and dictionaries can return optionals\nlet numbers = [1, 2, 3]\nlet firstNumber = numbers.first  // Int? (could be empty array)\n\nlet dictionary = [\"key\": \"value\"]\nlet value = dictionary[\"key\"]    // String? (key might not exist)\n```\n\n## Safe Unwrapping Techniques\n\n### 1. Optional Binding (if let)\n```swift\nvar optionalName: String? = \"Alice\"\n\n// Safe way to unwrap\nif let name = optionalName {\n    print(\"Hello, \\(name)!\")  // Only executes if not nil\n} else {\n    print(\"No name provided\")\n}\n\n// Multiple optional binding\nlet optionalAge: Int? = 25\nlet optionalEmail: String? = \"alice@example.com\"\n\nif let name = optionalName,\n   let age = optionalAge,\n   let email = optionalEmail {\n    print(\"\\(name) is \\(age) years old, email: \\(email)\")\n}\n```\n\n### 2. Guard Statements\n```swift\nfunc processUser(name: String?, age: Int?) {\n    guard let userName = name else {\n        print(\"Name is required\")\n        return\n    }\n    \n    guard let userAge = age, userAge >= 18 else {\n        print(\"Valid adult age required\")\n        return\n    }\n    \n    // userName and userAge are now safely unwrapped\n    print(\"Processing user: \\(userName), age: \\(userAge)\")\n}\n```\n\n### 3. Nil Coalescing Operator (??)\n```swift\nlet optionalName: String? = nil\nlet defaultName = \"Unknown\"\n\n// Provide default value if nil\nlet displayName = optionalName ?? defaultName\nprint(displayName)  // \"Unknown\"\n\n// Chaining nil coalescing\nlet firstName: String? = nil\nlet lastName: String? = nil\nlet username: String? = \"user123\"\n\nlet displayText = firstName ?? lastName ?? username ?? \"Anonymous\"\nprint(displayText)  // \"user123\"\n```\n\n### 4. Optional Chaining\n```swift\nclass Person {\n    var address: Address?\n}\n\nclass Address {\n    var street: String?\n    var city: String?\n}\n\nlet person = Person()\nperson.address = Address()\nperson.address?.street = \"123 Main St\"\n\n// Safe chaining - returns nil if any link is nil\nlet street = person.address?.street\nlet city = person.address?.city?.uppercased()\n\n// Method chaining\nclass User {\n    var profile: Profile?\n}\n\nclass Profile {\n    func getFullName() -> String? {\n        return \"John Doe\"\n    }\n}\n\nlet user = User()\nlet fullName = user.profile?.getFullName()?.uppercased()\n```\n\n### 5. Force Unwrapping (Use with Caution!)\n```swift\nlet optionalNumber: Int? = 42\n\n// Force unwrap with ! - crashes if nil\nlet number = optionalNumber!  // Only use when 100% sure it's not nil\n\n// Better: Check first\nif optionalNumber != nil {\n    let safeNumber = optionalNumber!\n    print(safeNumber)\n}\n\n// Implicitly unwrapped optionals\nvar implicitlyUnwrapped: String! = \"Hello\"\nprint(implicitlyUnwrapped)  // No need for unwrapping, but can crash\n```\n\n## Practical Examples\n\n### 1. Network Response Handling\n```swift\nstruct User {\n    let id: Int\n    let name: String\n    let email: String?\n}\n\nfunc parseUser(from json: [String: Any]) -> User? {\n    guard let id = json[\"id\"] as? Int,\n          let name = json[\"name\"] as? String else {\n        return nil  // Invalid data\n    }\n    \n    let email = json[\"email\"] as? String  // Optional field\n    \n    return User(id: id, name: name, email: email)\n}\n\n// Usage\nlet jsonData: [String: Any] = [\n    \"id\": 123,\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n]\n\nif let user = parseUser(from: jsonData) {\n    print(\"User: \\(user.name)\")\n    \n    // Safe email handling\n    if let email = user.email {\n        print(\"Email: \\(email)\")\n    } else {\n        print(\"No email provided\")\n    }\n}\n```\n\n### 2. Collection Safety\n```swift\nlet numbers = [1, 2, 3, 4, 5]\n\n// Safe array access\nif let firstNumber = numbers.first {\n    print(\"First: \\(firstNumber)\")\n}\n\nif let lastNumber = numbers.last {\n    print(\"Last: \\(lastNumber)\")\n}\n\n// Dictionary access\nlet scores = [\"Alice\": 95, \"Bob\": 87, \"Charlie\": 92]\n\nif let aliceScore = scores[\"Alice\"] {\n    print(\"Alice scored \\(aliceScore)\")\n}\n\nlet defaultScore = scores[\"Unknown\"] ?? 0\nprint(\"Default score: \\(defaultScore)\")\n```\n\n### 3. Error Handling with Optionals\n```swift\nenum ValidationError: Error {\n    case invalidEmail\n    case invalidAge\n}\n\nfunc validateUser(email: String?, age: Int?) -> (isValid: Bool, error: ValidationError?) {\n    guard let userEmail = email, userEmail.contains(\"@\") else {\n        return (false, .invalidEmail)\n    }\n    \n    guard let userAge = age, userAge >= 13 else {\n        return (false, .invalidAge)\n    }\n    \n    return (true, nil)\n}\n\n// Usage\nlet validation = validateUser(email: \"test@example.com\", age: 25)\nif validation.isValid {\n    print(\"User is valid\")\n} else if let error = validation.error {\n    switch error {\n    case .invalidEmail:\n        print(\"Invalid email format\")\n    case .invalidAge:\n        print(\"Age must be 13 or older\")\n    }\n}\n```\n\n## Best Practices\n\n1. **Prefer safe unwrapping** over force unwrapping\n2. **Use guard statements** for early returns\n3. **Provide meaningful defaults** with nil coalescing\n4. **Chain optionals safely** with optional chaining\n5. **Only force unwrap** when you're absolutely certain the value exists\n6. **Use implicitly unwrapped optionals sparingly** (mainly for outlets)\n\n## Common Patterns\n```swift\n// Transform optional values\nlet optionalString: String? = \"123\"\nlet optionalNumber = optionalString.flatMap { Int($0) }\n\n// Filter out nils from arrays\nlet optionalNumbers: [Int?] = [1, nil, 3, nil, 5]\nlet validNumbers = optionalNumbers.compactMap { $0 }\nprint(validNumbers)  // [1, 3, 5]\n\n// Optional binding with additional conditions\nif let age = optionalAge, age >= 18, age <= 65 {\n    print(\"Working age adult\")\n}\n```\n\nOptionals are fundamental to Swift's safety and help prevent many runtime crashes by forcing you to handle the absence of values explicitly."
  }
]